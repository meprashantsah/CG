//Bresenham's line drawing technique

using namespace std;
#include <iostream>
#include <GL/glut.h>

// end points for line

float ax = 100, ay = 200, bx = 200, by = 130;

void draw_pixel(float x, float y)
{
    glBegin(GL_POINTS);
    glVertex2f(x, y);
    glEnd();
}

void bres()
{
    float dx = bx - ax, dy = by - ay;
    float m = dy / dx;
    float inc = 1; // for positive slope
    if (m < 0)
    { // negative slope
        inc = -1;
    }
    dx = abs(dx);
    dy = abs(dy);
    if (abs(m) < 1)
    {
        // left to right
        if (bx < ax)
        {
            swap(ax, bx);
            swap(ay, by);
        }
        // set starting point to leftmost point
        float x = ax, y = ay;
        draw_pixel(x, y); // plot the first point
        float p = 2 * dy - dx;
        // run loop foe dx timex
        while (x < bx)
        {
            // decision value is negative
            if (p < 0)
            {
                p += 2 * dy;
            }
            else
            {
                y += inc;
                p += 2 * dy - 2 * dx;
            }
            x++;
            draw_pixel(x, y);
        } // end while

    } // end if(abs(m)<1)
}

void display()
{
    glClear(GL_COLOR_BUFFER_BIT);

    // GIVE END POINTS
    glColor3f(1, 0, 0);
    glPointSize(3);
    draw_pixel(ax, ay);
    draw_pixel(bx, by);
    bres();
    glFlush();
}

void myinit()
{
    glClearColor(1, 1, 1, 1);
    glMatrixMode(GL_PROJECTION);
    gluOrtho2D(0, 499, 0, 499);
    glMatrixMode(GL_MODELVIEW);
}

int main(int argc, char **argv)
{
    cout << "Enter the values";
    cin >> ax >> ay >> bx >> by;
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_RGB | GLUT_SINGLE);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Bresenham's line drawing algorith");
    myinit();
    glutDisplayFunc(display);
    glutMainLoop();
    return 0;
}
